#!/bin/sh -ex
reset

################################################################################
# variables
## filesystem and source tarballs

BASE=$(dirname $0)
NAME=jails
DATASET=zroot/${NAME}
SETS="base doc"
VERSION=11.0-RELEASE
ABI=FreeBSD:11:x86:64
ABI=FreeBSD:11:amd64
SOURCE=/downloads/$VERSION
SITE=http://ftp.de.freebsd.org/pub/FreeBSD/releases/amd64/amd64/$VERSION
MOUNTPOINT=/${NAME}
TEMPLATE=${MOUNTPOINT}/${VERSION}

## jail template settings
DOMAIN=domarino.com
NAMESERVER=10.240.0.1
NETWORK=10.240.0.0/16
PACKAGES="security/ca_root_nss ports-mgmt/pkg"

################################################################################
# fetch the bits
if test ! -d $SOURCE; then
    mkdir -p $SOURCE
fi
for set in ${SETS}; do
    if test ! -f ${SOURCE}/${set}.txz; then
        fetch -4a ${SITE}/$set.txz -o $SOURCE
    fi
done

################################################################################
# host-specific things
## /etc/jail.conf is a list of generic and per-jail definitions
## /etc/pf.conf tells the host what networks the jails can access
## /etc/unbound/conf.d/secure.conf ensures that jail DNS queries are
## both accepted inbound, and responded to from the same interface

################################################################################
## deploy host jail definition file
# the magic numbers in osrelease and osreldate are taken from your
# proposed release:
# $ sysctl -a kern |grep kern.osrel
# 	kern.osrelease: 11.0-RELEASE-p8
# 	kern.osreldate: 1100122
# $ freebsd-version -ku
# 	11.0-RELEASE-p2
# 	11.0-RELEASE-p7

sysrc -f /etc/rc.conf.d/jail jail_enable=YES

cat << JAILCONF > /etc/jail.conf
interface = "lo1";
host.hostname = "\$name.local";
path = "${MOUNTPOINT}/\$name";
ip4.addr = 10.240.0.\$ip;
mount.fstab = "${MOUNTPOINT}/\$name.fstab";
osrelease = "11.0-RELEASE-p8";
osreldate = 1100122;

allow.raw_sockets = 1;

exec.start = "/bin/sh /etc/rc";
exec.stop = "/bin/sh /etc/rc.shutdown";
exec.clean;
exec.consolelog = "/var/log/jail_\${name}_console.log";

mount.devfs;

iwantmybox {
    \$ip = 100;
    mount.fstab = "";
}

JAILCONF

################################################################################
## deploy host firewall
# see https://calomel.org/pf_config.html
cp etc/pf.conf /etc/pf.conf
service pf restart || /usr/bin/true

################################################################################
## deploy local_unbound jails can access local caching DNS forwarder
cp etc/unbound/conf.d/secure.conf /etc/unbound/conf.d/secure.conf
service local_unbound restart || /usr/bin/true

################################################################################
## init
sudo service jail onestop
zfs destroy -rR zroot/jails
zfs create -o mountpoint=${MOUNTPOINT} ${DATASET}
zfs create ${DATASET}/${VERSION}
zfs snapshot -r ${DATASET}/${VERSION}@empty

## unpack
for set in ${SETS}; do
    tar -xf ${SOURCE}/$set.txz -C ${TEMPLATE}
done
zfs snapshot -r ${DATASET}/${VERSION}@unpacked

################################################################################
# tweak
## minimal changes to ensure we can:
## - download packages from a letsencrypt enabled trusted package repository
## - that freebsd-update doesn't trip up over its own toes during later checks

# deploy minimal packages with same ABI as unpacked txz sets
sudo pkg -o ABI=${ABI} \
    --chroot ${TEMPLATE} \
    --config /etc/pkg/FreeBSD.conf \
    install -y ${PACKAGES}

cp -nrv ${BASE}/etc ${BASE}/usr ${TEMPLATE}/

cat << RESOLV > ${TEMPLATE}/etc/resolv.conf
search ${DOMAIN}
nameserver ${NAMESERVER}
options edns0
RESOLV

cat << RCCONF > ${TEMPLATE}/etc/rc.conf
RCCONF

echo IDSIgnorePaths /etc/freebsd-update.conf >> ${TEMPLATE}/etc/freebsd-update.conf
sed -i '' -Ee 's/^Components src/Components/'   ${TEMPLATE}/etc/freebsd-update.conf

#sudo pkg -o ABI=${ABI} --chroot ${TEMPLATE} install -y ${PACKAGES}

zfs snapshot -r ${DATASET}/${VERSION}@tweaked

################################################################################
# patch our template to save others the trouble

/usr/sbin/freebsd-update -b ${TEMPLATE} \
    --currently-running ${VERSION} \
    --not-running-from-cron \
    fetch install \
    | tee /dev/null
zfs snapshot -r ${DATASET}/${VERSION}@patched

## check that nothing got tampered with in transit

/usr/sbin/freebsd-update -b ${TEMPLATE} --currently-running ${VERSION} IDS
zfs snapshot -r ${DATASET}/${VERSION}@verified

################################################################################
## tidy up
zfs snapshot -r ${DATASET}/${VERSION}@ready

cat << EOF
OK

To create a new jail:

- add a new entry to /etc/jail.conf
- clone the template
- start it up

Using z2 as an example:

zfs destroy zroot/jails/z2
zfs clone   zroot/jails/${VERSION}@ready zroot/jails/z2
service jail status
jls
service jail start
jls
jail -v -r z2
jls
jail -v -c z1
jail -v -c z2
jexec -l z2 uname -a
jexec -l z2 drill -4u skunkwerks.at
jexec -l z2 drill -4t skunkwerks.at
jexec -l z2 curl -4vsk http://skunkwerks.at/
jexec -l z2 /bin/sh
service jail console z2

EOF

